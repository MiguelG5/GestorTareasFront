{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\mikey\\\\Desktop\\\\GestorTareasFront\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nlet RegisterComponent = class RegisterComponent {\n  constructor(fb, loginService, router) {\n    this.fb = fb;\n    this.loginService = loginService;\n    this.router = router;\n    this.hide = true;\n    this.validaciones = {\n      username: [{\n        type: 'required',\n        message: 'El nombre de usuario es requerido'\n      }],\n      email: [{\n        type: 'required',\n        message: 'El correo electrónico es requerido'\n      }, {\n        type: 'email',\n        message: 'Este no es un correo valido'\n      }],\n      password: [{\n        type: 'required',\n        message: 'La contraseña es requerida'\n      }, {\n        type: 'pattern',\n        message: 'Este campo debe contener al menos 1 mayúscula, 1 minúscula, números y caracteres especiales'\n      }, {\n        type: 'minlength',\n        message: 'Debe contener al menos 8 caracteres'\n      }],\n      repeatPassword: [{\n        type: 'required',\n        message: 'El campo es requerido'\n      }, {\n        type: 'passwordMismatch',\n        message: 'Las contraseñas no coinciden'\n      }],\n      aceptarTerminos: [{\n        type: 'required',\n        message: 'Debes aceptar los Términos y Condiciones'\n      }],\n      captcha: [{\n        type: 'required',\n        message: 'Debes validar el captcha'\n      }]\n    };\n    this.registerForm = this.fb.group({\n      username: ['', Validators.required],\n      captcha: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]+$/), Validators.minLength(8)]],\n      repeatPassword: ['', Validators.required],\n      razon_social: [''],\n      aceptarTerminos: [false, [Validators.requiredTrue]]\n    }, {\n      validator: this.passwordMatchValidator('password', 'repeatPassword')\n    });\n  }\n\n  register() {\n    var _this = this;\n\n    var _a, _b, _c, _d, _e, _f;\n\n    if (!this.registerForm.valid) {\n      this.markAllAsDirty();\n      return;\n    }\n\n    let rol = 'user';\n    const email = (_a = this.registerForm.get('email')) === null || _a === void 0 ? void 0 : _a.value;\n\n    if (email.endsWith('hotmail.com') || email.endsWith('outlook.com')) {\n      rol = 'admin';\n    }\n\n    let data = {\n      username: (_b = this.registerForm.get('username')) === null || _b === void 0 ? void 0 : _b.value,\n      email: (_c = this.registerForm.get('email')) === null || _c === void 0 ? void 0 : _c.value,\n      password: (_d = this.registerForm.get('password')) === null || _d === void 0 ? void 0 : _d.value,\n      role: rol,\n      razon_social: ((_e = this.registerForm.get('razon_social')) === null || _e === void 0 ? void 0 : _e.value) || null // Asegura que se tome el valor correctamente\n\n    };\n    this.loginService.validarcorreo((_f = this.registerForm.get('email')) === null || _f === void 0 ? void 0 : _f.value).subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (respV) {\n        const {\n          value: code\n        } = yield Swal.fire({\n          text: 'Se ha enviado un código para validar el correo.',\n          input: 'text',\n          inputValue: '',\n          inputAttributes: {\n            maxLength: '6'\n          },\n          showCancelButton: true,\n          cancelButtonText: 'Cancelar',\n          backdrop: false\n        });\n\n        _this.loginService.validCode(code, respV.objeto).subscribe(resp => {\n          if (resp.estado === 0) {\n            _this.loginService.register(data).subscribe( /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator(function* (resp) {\n                Swal.fire({\n                  title: '¡Cuenta creada con éxito!',\n                  text: resp.message,\n                  icon: 'success',\n                  backdrop: false,\n                  timer: 2000,\n                  showConfirmButton: false\n                }).then(() => {\n                  _this.router.navigate(['']);\n\n                  _this.loginService.setUser(resp.user);\n\n                  localStorage.setItem('usuario', JSON.stringify(resp.user));\n                });\n              });\n\n              return function (_x2) {\n                return _ref2.apply(this, arguments);\n              };\n            }(), err => {\n              Swal.fire({\n                title: 'Ocurrió un error en el sistema',\n                text: err.error.message,\n                icon: 'error',\n                backdrop: false,\n                timer: 2000,\n                showConfirmButton: false\n              });\n            });\n          }\n        }, error => {\n          Swal.fire({\n            title: 'Error',\n            text: error.error.mensaje,\n            icon: 'error',\n            timer: 3000,\n            backdrop: false\n          });\n          console.error(error);\n        });\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n\n  passwordMatchValidator(controlName, matchingControlName) {\n    return formGroup => {\n      const control = formGroup.get(controlName);\n      const matchingControl = formGroup.get(matchingControlName);\n\n      if ((matchingControl === null || matchingControl === void 0 ? void 0 : matchingControl.value) == null || (matchingControl === null || matchingControl === void 0 ? void 0 : matchingControl.value) == '') {\n        matchingControl === null || matchingControl === void 0 ? void 0 : matchingControl.setErrors({\n          required: true\n        });\n        return {\n          required: true\n        };\n      } else if (control && matchingControl && control.value !== matchingControl.value) {\n        matchingControl.setErrors({\n          passwordMismatch: true\n        });\n        return {\n          passwordMismatch: true\n        };\n      } else {\n        matchingControl === null || matchingControl === void 0 ? void 0 : matchingControl.setErrors(null);\n        return null;\n      }\n    };\n  }\n\n  get username() {\n    return this.registerForm.get('username');\n  }\n\n  get email() {\n    return this.registerForm.get('email');\n  }\n\n  get password() {\n    return this.registerForm.get('password');\n  }\n\n  get repeatPassword() {\n    return this.registerForm.get('repeatPassword');\n  }\n\n  get razonSocial() {\n    return this.registerForm.get('razonSocial');\n  }\n\n  get aceptarTerminos() {\n    return this.registerForm.get('aceptarTerminos');\n  }\n\n  markAllAsDirty() {\n    Object.keys(this.registerForm.controls).forEach(controlName => {\n      const control = this.registerForm.get(controlName);\n      control === null || control === void 0 ? void 0 : control.markAsTouched();\n    });\n  }\n\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"sources":["C:/Users/mikey/Desktop/GestorTareasFront/src/app/components/register/register.component.ts"],"names":["__decorate","Component","Validators","Swal","RegisterComponent","constructor","fb","loginService","router","hide","validaciones","username","type","message","email","password","repeatPassword","aceptarTerminos","captcha","registerForm","group","required","pattern","minLength","razon_social","requiredTrue","validator","passwordMatchValidator","register","_a","_b","_c","_d","_e","_f","valid","markAllAsDirty","rol","get","value","endsWith","data","role","validarcorreo","subscribe","respV","code","fire","text","input","inputValue","inputAttributes","maxLength","showCancelButton","cancelButtonText","backdrop","validCode","objeto","resp","estado","title","icon","timer","showConfirmButton","then","navigate","setUser","user","localStorage","setItem","JSON","stringify","err","error","mensaje","console","controlName","matchingControlName","formGroup","control","matchingControl","setErrors","passwordMismatch","razonSocial","Object","keys","controls","forEach","markAsTouched","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nimport { Validators, } from '@angular/forms';\r\nimport Swal from 'sweetalert2';\r\nlet RegisterComponent = class RegisterComponent {\r\n    constructor(fb, loginService, router) {\r\n        this.fb = fb;\r\n        this.loginService = loginService;\r\n        this.router = router;\r\n        this.hide = true;\r\n        this.validaciones = {\r\n            username: [\r\n                { type: 'required', message: 'El nombre de usuario es requerido' },\r\n            ],\r\n            email: [\r\n                { type: 'required', message: 'El correo electrónico es requerido' },\r\n                { type: 'email', message: 'Este no es un correo valido' },\r\n            ],\r\n            password: [\r\n                { type: 'required', message: 'La contraseña es requerida' },\r\n                {\r\n                    type: 'pattern',\r\n                    message: 'Este campo debe contener al menos 1 mayúscula, 1 minúscula, números y caracteres especiales',\r\n                },\r\n                { type: 'minlength', message: 'Debe contener al menos 8 caracteres' },\r\n            ],\r\n            repeatPassword: [\r\n                { type: 'required', message: 'El campo es requerido' },\r\n                { type: 'passwordMismatch', message: 'Las contraseñas no coinciden' },\r\n            ],\r\n            aceptarTerminos: [\r\n                { type: 'required', message: 'Debes aceptar los Términos y Condiciones' },\r\n            ],\r\n            captcha: [{ type: 'required', message: 'Debes validar el captcha' }],\r\n        };\r\n        this.registerForm = this.fb.group({\r\n            username: ['', Validators.required],\r\n            captcha: ['', Validators.required],\r\n            email: ['', [Validators.required, Validators.email]],\r\n            password: [\r\n                '',\r\n                [\r\n                    Validators.required,\r\n                    Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]+$/),\r\n                    Validators.minLength(8),\r\n                ],\r\n            ],\r\n            repeatPassword: ['', Validators.required],\r\n            razon_social: [''],\r\n            aceptarTerminos: [false, [Validators.requiredTrue]],\r\n        }, {\r\n            validator: this.passwordMatchValidator('password', 'repeatPassword'),\r\n        });\r\n    }\r\n    register() {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        if (!this.registerForm.valid) {\r\n            this.markAllAsDirty();\r\n            return;\r\n        }\r\n        let rol = 'user';\r\n        const email = (_a = this.registerForm.get('email')) === null || _a === void 0 ? void 0 : _a.value;\r\n        if (email.endsWith('hotmail.com') || email.endsWith('outlook.com')) {\r\n            rol = 'admin';\r\n        }\r\n        let data = {\r\n            username: (_b = this.registerForm.get('username')) === null || _b === void 0 ? void 0 : _b.value,\r\n            email: (_c = this.registerForm.get('email')) === null || _c === void 0 ? void 0 : _c.value,\r\n            password: (_d = this.registerForm.get('password')) === null || _d === void 0 ? void 0 : _d.value,\r\n            role: rol,\r\n            razon_social: ((_e = this.registerForm.get('razon_social')) === null || _e === void 0 ? void 0 : _e.value) || null, // Asegura que se tome el valor correctamente\r\n        };\r\n        this.loginService\r\n            .validarcorreo((_f = this.registerForm.get('email')) === null || _f === void 0 ? void 0 : _f.value)\r\n            .subscribe(async (respV) => {\r\n            const { value: code } = await Swal.fire({\r\n                text: 'Se ha enviado un código para validar el correo.',\r\n                input: 'text',\r\n                inputValue: '',\r\n                inputAttributes: {\r\n                    maxLength: '6',\r\n                },\r\n                showCancelButton: true,\r\n                cancelButtonText: 'Cancelar',\r\n                backdrop: false,\r\n            });\r\n            this.loginService.validCode(code, respV.objeto).subscribe((resp) => {\r\n                if (resp.estado === 0) {\r\n                    this.loginService.register(data).subscribe(async (resp) => {\r\n                        Swal.fire({\r\n                            title: '¡Cuenta creada con éxito!',\r\n                            text: resp.message,\r\n                            icon: 'success',\r\n                            backdrop: false,\r\n                            timer: 2000,\r\n                            showConfirmButton: false,\r\n                        }).then(() => {\r\n                            this.router.navigate(['']);\r\n                            this.loginService.setUser(resp.user);\r\n                            localStorage.setItem('usuario', JSON.stringify(resp.user));\r\n                        });\r\n                    }, (err) => {\r\n                        Swal.fire({\r\n                            title: 'Ocurrió un error en el sistema',\r\n                            text: err.error.message,\r\n                            icon: 'error',\r\n                            backdrop: false,\r\n                            timer: 2000,\r\n                            showConfirmButton: false,\r\n                        });\r\n                    });\r\n                }\r\n            }, (error) => {\r\n                Swal.fire({\r\n                    title: 'Error',\r\n                    text: error.error.mensaje,\r\n                    icon: 'error',\r\n                    timer: 3000,\r\n                    backdrop: false,\r\n                });\r\n                console.error(error);\r\n            });\r\n        });\r\n    }\r\n    passwordMatchValidator(controlName, matchingControlName) {\r\n        return (formGroup) => {\r\n            const control = formGroup.get(controlName);\r\n            const matchingControl = formGroup.get(matchingControlName);\r\n            if ((matchingControl === null || matchingControl === void 0 ? void 0 : matchingControl.value) == null || (matchingControl === null || matchingControl === void 0 ? void 0 : matchingControl.value) == '') {\r\n                matchingControl === null || matchingControl === void 0 ? void 0 : matchingControl.setErrors({ required: true });\r\n                return { required: true };\r\n            }\r\n            else if (control &&\r\n                matchingControl &&\r\n                control.value !== matchingControl.value) {\r\n                matchingControl.setErrors({ passwordMismatch: true });\r\n                return { passwordMismatch: true };\r\n            }\r\n            else {\r\n                matchingControl === null || matchingControl === void 0 ? void 0 : matchingControl.setErrors(null);\r\n                return null;\r\n            }\r\n        };\r\n    }\r\n    get username() {\r\n        return this.registerForm.get('username');\r\n    }\r\n    get email() {\r\n        return this.registerForm.get('email');\r\n    }\r\n    get password() {\r\n        return this.registerForm.get('password');\r\n    }\r\n    get repeatPassword() {\r\n        return this.registerForm.get('repeatPassword');\r\n    }\r\n    get razonSocial() {\r\n        return this.registerForm.get('razonSocial');\r\n    }\r\n    get aceptarTerminos() {\r\n        return this.registerForm.get('aceptarTerminos');\r\n    }\r\n    markAllAsDirty() {\r\n        Object.keys(this.registerForm.controls).forEach((controlName) => {\r\n            const control = this.registerForm.get(controlName);\r\n            control === null || control === void 0 ? void 0 : control.markAsTouched();\r\n        });\r\n    }\r\n};\r\nRegisterComponent = __decorate([\r\n    Component({\r\n        selector: 'app-register',\r\n        templateUrl: './register.component.html',\r\n        styleUrls: ['./register.component.css'],\r\n    })\r\n], RegisterComponent);\r\nexport { RegisterComponent };\r\n"]},"metadata":{},"sourceType":"module"}